<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Bootloader.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Bootloader.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Fri Jan 18 09:52:21 2019
<BR><P>
<H3>Maximum Stack Usage =        164 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USB_LP_CAN1_RX0_IRQHandler &rArr; USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[60]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">BusFault_Handler</a> from stm32_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">DFU_Data_Setup</a> from usb_prop.o(i.DFU_Data_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[c]">DFU_GetConfigDescriptor</a> from usb_prop.o(i.DFU_GetConfigDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[b]">DFU_GetDeviceDescriptor</a> from usb_prop.o(i.DFU_GetDeviceDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[d]">DFU_GetStringDescriptor</a> from usb_prop.o(i.DFU_GetStringDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[a]">DFU_Get_Interface_Setting</a> from usb_prop.o(i.DFU_Get_Interface_Setting) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[9]">DFU_NoData_Setup</a> from usb_prop.o(i.DFU_NoData_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[5]">DFU_Reset</a> from usb_prop.o(i.DFU_Reset) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[e]">DFU_SetConfiguration</a> from usb_prop.o(i.DFU_SetConfiguration) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[f]">DFU_SetDeviceAddress</a> from usb_prop.o(i.DFU_SetDeviceAddress) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[6]">DFU_Status_In</a> from usb_prop.o(i.DFU_Status_In) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[7]">DFU_Status_Out</a> from usb_prop.o(i.DFU_Status_Out) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[4]">DFU_init</a> from usb_prop.o(i.DFU_init) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[25]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[47]">DNLOAD</a> from usb_prop.o(i.DNLOAD) referenced from usb_prop.o(i.DFU_Data_Setup)
 <LI><a href="#[17]">DebugMon_Handler</a> from stm32_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[42]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4d]">FLASH_If_Erase</a> from flash_if.o(i.FLASH_If_Erase) referenced from dfu_mal.o(i.MAL_Erase)
 <LI><a href="#[4e]">FLASH_If_Read</a> from flash_if.o(i.FLASH_If_Read) referenced from dfu_mal.o(i.MAL_Read)
 <LI><a href="#[4f]">FLASH_If_Write</a> from flash_if.o(i.FLASH_If_Write) referenced from dfu_mal.o(i.MAL_Write)
 <LI><a href="#[48]">GETSTATE</a> from usb_prop.o(i.GETSTATE) referenced from usb_prop.o(i.DFU_Data_Setup)
 <LI><a href="#[49]">GETSTATUS</a> from usb_prop.o(i.GETSTATUS) referenced from usb_prop.o(i.DFU_Data_Setup)
 <LI><a href="#[12]">HardFault_Handler</a> from stm32_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">MemManage_Handler</a> from stm32_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">NMI_Handler</a> from stm32_it.o(i.NMI_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">NOP_Process</a> from usb_core.o(i.NOP_Process) referenced 42 times from usb_istr.o(.data)
 <LI><a href="#[1b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">PendSV_Handler</a> from stm32_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[43]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">SVC_Handler</a> from stm32_it.o(i.SVC_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4b]">Standard_GetConfiguration</a> from usb_core.o(i.Standard_GetConfiguration) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[4c]">Standard_GetInterface</a> from usb_core.o(i.Standard_GetInterface) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[4a]">Standard_GetStatus</a> from usb_core.o(i.Standard_GetStatus) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[19]">SysTick_Handler</a> from stm32_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[46]">UPLOAD</a> from usb_prop.o(i.UPLOAD) referenced from usb_prop.o(i.DFU_Data_Setup)
 <LI><a href="#[3f]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[40]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[41]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[44]">USBWakeUp_IRQHandler</a> from stm32_it.o(i.USBWakeUp_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">USB_LP_CAN1_RX0_IRQHandler</a> from stm32_it.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">UsageFault_Handler</a> from stm32_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[50]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[50]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[51]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[53]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a6]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a7]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a8]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[a9]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[aa]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[57]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ab]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[af]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[bd]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[be]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[5c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[c0]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[c1]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[c2]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[c3]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[c4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[c5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[c6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[52]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c7]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[54]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[56]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c8]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[58]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Set_System &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c9]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[61]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[ca]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[cb]"></a>__get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[cc]"></a>__set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[cd]"></a>__get_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[a4]"></a>__set_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>__REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[cf]"></a>__REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d0]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[5a]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d3]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d4]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[d5]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[14]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>ByteSwap</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(i.ByteSwap))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[62]"></a>CTR_LP</STRONG> (Thumb, 616 bytes, Stack size 8 bytes, usb_int.o(i.CTR_LP))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[9b]"></a>ClearDTOG_RX</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_RX))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[99]"></a>ClearDTOG_TX</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_TX))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[6e]"></a>Clear_Status_Out</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usb_regs.o(i.Clear_Status_Out))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_Reset
</UL>

<P><STRONG><a name="[66]"></a>DFU_Button_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hw_config.o(i.DFU_Button_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DFU_Button_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>DFU_Button_Read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hw_config.o(i.DFU_Button_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DFU_Button_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>DFU_Data_Setup</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, usb_prop.o(i.DFU_Data_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DFU_Data_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>DFU_GetConfigDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(i.DFU_GetConfigDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DFU_GetConfigDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>DFU_GetDeviceDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(i.DFU_GetDeviceDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DFU_GetDeviceDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>DFU_GetStringDescriptor</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_prop.o(i.DFU_GetStringDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DFU_GetStringDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>DFU_Get_Interface_Setting</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_prop.o(i.DFU_Get_Interface_Setting))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>DFU_NoData_Setup</STRONG> (Thumb, 264 bytes, Stack size 0 bytes, usb_prop.o(i.DFU_NoData_Setup))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>DFU_Reset</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, usb_prop.o(i.DFU_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DFU_Reset &rArr; SetDeviceAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Status_Out
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>DFU_SetConfiguration</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_prop.o(i.DFU_SetConfiguration))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>DFU_SetDeviceAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_prop.o(i.DFU_SetDeviceAddress))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>DFU_Status_In</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.DFU_Status_In))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>DFU_Status_Out</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, usb_prop.o(i.DFU_Status_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DFU_Status_Out &rArr; MAL_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Write
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Erase
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_write_crc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>DFU_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_prop.o(i.DFU_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DFU_init &rArr; Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>DFU_write_crc</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, usb_prop.o(i.DFU_write_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DFU_write_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_Status_Out
</UL>

<P><STRONG><a name="[47]"></a>DNLOAD</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, usb_prop.o(i.DNLOAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DNLOAD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.DFU_Data_Setup)
</UL>
<P><STRONG><a name="[17]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBWakeUp_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Erase
</UL>

<P><STRONG><a name="[83]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[4d]"></a>FLASH_If_Erase</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, flash_if.o(i.FLASH_If_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_If_Erase &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_mal.o(i.MAL_Erase)
</UL>
<P><STRONG><a name="[88]"></a>FLASH_If_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash_if.o(i.FLASH_If_Init))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Init
</UL>

<P><STRONG><a name="[4e]"></a>FLASH_If_Read</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flash_if.o(i.FLASH_If_Read))
<BR>[Address Reference Count : 1]<UL><LI> dfu_mal.o(i.MAL_Read)
</UL>
<P><STRONG><a name="[4f]"></a>FLASH_If_Write</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, flash_if.o(i.FLASH_If_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_If_Write &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfu_mal.o(i.MAL_Write)
</UL>
<P><STRONG><a name="[82]"></a>FLASH_ProgramWord</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Write
</UL>

<P><STRONG><a name="[94]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[81]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[48]"></a>GETSTATE</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_prop.o(i.GETSTATE))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.DFU_Data_Setup)
</UL>
<P><STRONG><a name="[49]"></a>GETSTATUS</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, usb_prop.o(i.GETSTATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GETSTATUS &rArr; MAL_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.DFU_Data_Setup)
</UL>
<P><STRONG><a name="[68]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_Button_Config
</UL>

<P><STRONG><a name="[6a]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_Button_Read
</UL>

<P><STRONG><a name="[7d]"></a>GetEPRxAddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[7a]"></a>GetEPTxAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPTxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[74]"></a>Get_SerialNum</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hw_config.o(i.Get_SerialNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_init
</UL>

<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>In0_Process</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usb_core.o(i.In0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = In0_Process &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[71]"></a>MAL_Erase</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dfu_mal.o(i.MAL_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAL_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_Status_Out
</UL>

<P><STRONG><a name="[84]"></a>MAL_GetStatus</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, dfu_mal.o(i.MAL_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GETSTATUS
</UL>

<P><STRONG><a name="[87]"></a>MAL_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dfu_mal.o(i.MAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[9e]"></a>MAL_Read</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dfu_mal.o(i.MAL_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MAL_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPLOAD
</UL>

<P><STRONG><a name="[72]"></a>MAL_Write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dfu_mal.o(i.MAL_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MAL_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_Status_Out
</UL>

<P><STRONG><a name="[13]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NOP_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_core.o(i.NOP_Process))
<BR>[Address Reference Count : 2]<UL><LI> usb_istr.o(.data)
<LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[a1]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
</UL>

<P><STRONG><a name="[a0]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
</UL>

<P><STRONG><a name="[65]"></a>Out0_Process</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usb_core.o(i.Out0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Out0_Process &rArr; DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[7e]"></a>PMAToUserBufferCopy</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, usb_mem.o(i.PMAToUserBufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PMAToUserBufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[18]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>Post0_Process</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usb_core.o(i.Post0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Post0_Process &rArr; SetEPRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>

<P><STRONG><a name="[75]"></a>PowerOn</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usb_pwr.o(i.PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerOn
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetISTR
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_init
</UL>

<P><STRONG><a name="[97]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
</UL>

<P><STRONG><a name="[67]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_Button_Config
</UL>

<P><STRONG><a name="[9d]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[96]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_USBCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
</UL>

<P><STRONG><a name="[78]"></a>Reset_Device</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hw_config.o(i.Reset_Device))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_write_crc
</UL>

<P><STRONG><a name="[91]"></a>Resume</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, usb_pwr.o(i.Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Resume
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[92]"></a>Resume_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_pwr.o(i.Resume_Init))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>

<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>SetDeviceAddress</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, usb_core.o(i.SetDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_Reset
</UL>

<P><STRONG><a name="[6c]"></a>SetEPRxCount</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_Reset
</UL>

<P><STRONG><a name="[6f]"></a>SetEPRxValid</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxValid
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_Reset
</UL>

<P><STRONG><a name="[6d]"></a>SetEPTxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_Reset
</UL>

<P><STRONG><a name="[9a]"></a>SetEPTxStatus</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, usb_regs.o(i.SetEPTxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[90]"></a>SetISTR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_regs.o(i.SetISTR))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>

<P><STRONG><a name="[93]"></a>Set_System</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hw_config.o(i.Set_System))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Set_System &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>Set_USBClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_config.o(i.Set_USBClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_USBClock
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_USBCLKConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>Setup0_Process</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, usb_core.o(i.Setup0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSwap
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[8c]"></a>Standard_ClearFeature</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, usb_core.o(i.Standard_ClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Standard_ClearFeature &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[4b]"></a>Standard_GetConfiguration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[6b]"></a>Standard_GetDescriptorData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetDescriptorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetDescriptorData
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_GetStringDescriptor
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_GetDeviceDescriptor
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_GetConfigDescriptor
</UL>

<P><STRONG><a name="[4c]"></a>Standard_GetInterface</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[4a]"></a>Standard_GetStatus</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[8a]"></a>Standard_SetConfiguration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[8b]"></a>Standard_SetDeviceFeature</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetDeviceFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetDeviceFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[8e]"></a>Standard_SetEndPointFeature</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, usb_core.o(i.Standard_SetEndPointFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Standard_SetEndPointFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[8d]"></a>Standard_SetInterface</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[9c]"></a>Stm32_Clock_Init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, main.o(i.Stm32_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Stm32_Clock_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>Suspend</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, usb_pwr.o(i.Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[19]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UPLOAD</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, usb_prop.o(i.UPLOAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UPLOAD &rArr; MAL_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.DFU_Data_Setup)
</UL>
<P><STRONG><a name="[44]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32_it.o(i.USBWakeUp_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBWakeUp_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>USB_Cable_Config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_config.o(i.USB_Cable_Config))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>

<P><STRONG><a name="[a5]"></a>USB_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_init.o(i.USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>USB_Interrupts_Config</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hw_config.o(i.USB_Interrupts_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_Interrupts_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_init
</UL>

<P><STRONG><a name="[a2]"></a>USB_Istr</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, usb_istr.o(i.USB_Istr))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[2e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32_it.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>USB_SIL_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_sil.o(i.USB_SIL_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_init
</UL>

<P><STRONG><a name="[15]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>UserToPMABufferCopy</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, usb_mem.o(i.UserToPMABufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UserToPMABufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[59]"></a>main</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = main &rArr; Set_System &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_MSP
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_Button_Read
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFU_Button_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[79]"></a>DataStageIn</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, usb_core.o(i.DataStageIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>

<P><STRONG><a name="[7c]"></a>DataStageOut</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, usb_core.o(i.DataStageOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
</UL>

<P><STRONG><a name="[7f]"></a>Data_Setup0</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, usb_core.o(i.Data_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[89]"></a>NoData_Setup0</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, usb_core.o(i.NoData_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = NoData_Setup0 &rArr; Standard_ClearFeature &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetInterface
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetEndPointFeature
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetDeviceFeature
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetConfiguration
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[85]"></a>IntToUnicode</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, hw_config.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
